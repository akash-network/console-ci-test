name: Release App

on:
  workflow_call:
    inputs:
      app:
        description: 'The app to release'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.app }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get Diffs
        id: bumps
        run: |
          # File paths
          changelog_file="apps/${{ inputs.app }}/CHANGELOG.md"
          package_file="apps/${{ inputs.app }}/package.json"

          # Check if the files exist
          if [ ! -f "$changelog_file" ]; then
            echo "Error: Changelog file $changelog_file does not exist."
            exit 1
          fi

          if [ ! -f "$package_file" ]; then
            echo "Error: Package file $package_file does not exist."
            exit 1
          fi

          # Determine the merge base
          merge_base=$(git merge-base HEAD^ HEAD)
          if [ -z "$merge_base" ]; then
            echo "Error: Could not determine merge base."
            exit 1
          fi

          # Get changelog content changes (only added lines without metadata)
          changelog_diff=$(git diff $merge_base HEAD -- "$changelog_file" | grep -E '^\+' | grep -vE '^\+\+\+|^diff|^index|^@@' | sed 's/^+//')

          if [ -n "$changelog_diff" ]; then
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$changelog_diff" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          # Get version diff
          current_version=$(jq -r '.version' "$package_file")
          previous_version=$(git show $merge_base:"$package_file" | jq -r '.version' || echo "Not found")

          if [ "$previous_version" != "Not found" ] && [ "$current_version" != "$previous_version" ]; then
            echo "version=$current_version" >> $GITHUB_OUTPUT
          fi

      - name: Echo the version and changelog
        run: |
          echo "---- version start ----"
          echo "${{ steps.bumps.outputs.version }}"
          echo "---- version end ----"
          echo "---- changelog start ----"
          echo "${{ steps.bumps.outputs.changelog }}"
          echo "---- changelog end ----"

      - name: Create Release
        if: ${{ steps.bumps.outputs.version != '' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.app }}/${{ steps.bumps.outputs.version }}
          release_name: Release ${{ inputs.app }}/${{ steps.bumps.outputs.version }}
          body: |
            ${{ steps.bumps.outputs.changelog }}
          prerelease: true